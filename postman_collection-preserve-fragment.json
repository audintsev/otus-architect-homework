{
	"info": {
		"_postman_id": "ee64de44-c911-470f-b46d-f380b794d9f5",
		"name": "OTUS Architect Homework12",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user1 in IdP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "513d395a-11de-4c78-8121-71cfa0dbe034",
						"exec": [
							"const locationHeader = pm.response.headers.get('Location')\r",
							"const id = locationHeader.substring(locationHeader.lastIndexOf(\"/\") + 1)\r",
							"pm.environment.set(\"userid1\", id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8f5aeedb-25e8-4898-8a65-06f95ebdfef1",
						"exec": [
							"if (pm.variables.get('forceAdminLogin')) {\r",
							"    const getAdminTokenRequest = {\r",
							"    url: pm.variables.replaceIn(\"{{keycloakUrl}}\") + \"/realms/master/protocol/openid-connect/token\",\r",
							"    method: 'POST',\r",
							"    header: [\r",
							"        'Content-Type:application/x-www-form-urlencoded',\r",
							"        'Accept:application/json'\r",
							"    ],\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            {key: \"client_id\", value: \"admin-cli\", disabled: false},\r",
							"            {key: \"grant_type\", value: \"password\", disabled: false},\r",
							"            {key: \"username\", value: pm.variables.get(\"keycloakAdminName\"), disabled: false},\r",
							"            {key: \"password\", value: pm.variables.get(\"keycloakAdminPassword\"), disabled: false}\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(getAdminTokenRequest, function (err, response) {\r",
							"        pm.environment.set(\"adminAccessToken\", response.json().access_token);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.environment.set(\"email1\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
							"pm.variables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
							"pm.variables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"enabled\": true,\r\n    \"email\": \"{{email1}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"attributes\": {}\r\n}"
				},
				"url": {
					"raw": "{{keycloakUrl}}/admin/realms/{{realm}}/users",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set password for user1 in IdP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "392c965b-0d1e-4e90-8ed5-8cf2d0099d06",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1f7c717a-eb7a-4345-a1af-a85fedcc65a0",
						"exec": [
							"if (pm.variables.get('forceAdminLogin')) {\r",
							"    const getAdminTokenRequest = {\r",
							"    url: pm.variables.replaceIn(\"{{keycloakUrl}}\") + \"/realms/master/protocol/openid-connect/token\",\r",
							"    method: 'POST',\r",
							"    header: [\r",
							"        'Content-Type:application/x-www-form-urlencoded',\r",
							"        'Accept:application/json'\r",
							"    ],\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            {key: \"client_id\", value: \"admin-cli\", disabled: false},\r",
							"            {key: \"grant_type\", value: \"password\", disabled: false},\r",
							"            {key: \"username\", value: pm.variables.get(\"keycloakAdminName\"), disabled: false},\r",
							"            {key: \"password\", value: pm.variables.get(\"keycloakAdminPassword\"), disabled: false}\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(getAdminTokenRequest, function (err, response) {\r",
							"        pm.variables.set(\"adminAccessToken\", response.json().access_token);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.environment.set(\"password1\", pm.variables.replaceIn('{{$randomPassword}}'))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"password\",\r\n    \"value\": \"{{password1}}\",\r\n    \"temporary\": false\r\n}\r\n"
				},
				"url": {
					"raw": "{{keycloakUrl}}/admin/realms/{{realm}}/users/{{userid1}}/reset-password",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"users",
						"{{userid1}}",
						"reset-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 login step1: user opens a page and is redirected to IdP login page",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "473039d9-777b-4732-bfca-b35e2659dcf5",
						"exec": [
							"const re = /document.cookie=(.*);document.cookie=(.*);document.cookie=\"signature=(.*);path=\\/\";location=\"([^\"]+)\"/\r",
							"\r",
							"const result = re.exec(responseBody)\r",
							"const signature = result[3]\r",
							"const location = result[4]\r",
							"\r",
							"const expectedRedirectUri = pm.variables.replaceIn(\"{{baseUrl}}/login/callback\")\r",
							"const locationBase = pm.variables.replaceIn(\"{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/auth?response_type=code&client_id={{client}}&redirect_uri=\")\r",
							"\r",
							"const appUrl = pm.variables.replaceIn(\"{{appUrl}}\")\r",
							"const domain = /(http|https):\\/\\/([^\\/]+)/.exec(appUrl)[2]\r",
							"\r",
							"const jar = pm.cookies.jar();\r",
							"jar.set(domain, { name: \"fragmentAfterLogin\", value: \"\"} )\r",
							"jar.set(domain, \"locationAfterLogin\", pm.variables.replaceIn(\"{{pathPrefix}}/app/person\"))\r",
							"jar.set(domain, \"signature\", signature)\r",
							"\r",
							"pm.environment.set(\"idpLoginPage\", locationBase + expectedRedirectUri)\r",
							"\r",
							"tests[\"Authorization code flow initiated: user is redirected to IdP: \" + location ] = location === locationBase + encodeURIComponent(expectedRedirectUri);\r",
							"tests[\"Captured signature: \" + signature ] = signature != null;\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "76ac96d1-b3ef-4367-bd1c-7850d0ed9956",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 login step2: open IdP login page",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b243890-908b-4e34-96bf-2add6da1878d",
						"exec": [
							"const re = /action=\"([^\"]+)\"/\r",
							"const capturedPostUrl = re.exec(responseBody)[1]\r",
							"\r",
							"// Hell, why there is no replaceAll???\r",
							"const loginPostUrl = capturedPostUrl.split(\"&amp;\").join(\"&\")\r",
							"\r",
							"pm.environment.set(\"loginPostUrl\", loginPostUrl)\r",
							"\r",
							"tests[`[INFO] loginPostUrl =: ${loginPostUrl}`] = loginPostUrl != null\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8737697d-55db-4fa7-9d07-ddc9d9d4bd75",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{idpLoginPage}}",
					"host": [
						"{{idpLoginPage}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 login step3: post login form",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b9bdc33-2ea5-4bf9-876c-ea8ec77dbe2c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{email1}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password1}}",
							"type": "text"
						},
						{
							"key": "credentialId",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{loginPostUrl}}",
					"host": [
						"{{loginPostUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 registers in the application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "40afeb18-fa55-485f-a471-e7898a085570",
						"exec": [
							"var responseJSON = JSON.parse(responseBody)\r",
							"pm.environment.set(\"user1AppId\", responseJSON[\"id\"])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person/register",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 updates his proifile in the app",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32844d3f-eb57-4bd6-9988-ad8301077b42",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{appUrl}}/person/{{user1AppId}}",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person",
						"{{user1AppId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 reads his proifile in the app",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "56171931-cbce-446c-9b46-7ece5e51536f",
						"exec": [
							"var responseJSON = JSON.parse(responseBody)\r",
							"tests[`[Check user1 profile in the app has changed` ] = responseJSON.firstName === \"John\" && responseJSON.lastName === \"Doe\"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person/{{user1AppId}}",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person",
						"{{user1AppId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User1 logs out",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "367873da-e072-4145-82b2-051273e6af32",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user2 in IdP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e624bf4-600a-4825-9baf-4bcd4b5545c3",
						"exec": [
							"const locationHeader = pm.response.headers.get('Location')\r",
							"const id = locationHeader.substring(locationHeader.lastIndexOf(\"/\") + 1)\r",
							"pm.environment.set(\"userid2\", id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7d129ca2-8e06-47af-a192-9cff6a6326bf",
						"exec": [
							"if (pm.variables.get('forceAdminLogin')) {\r",
							"    const getAdminTokenRequest = {\r",
							"    url: pm.variables.replaceIn(\"{{keycloakUrl}}\") + \"/realms/master/protocol/openid-connect/token\",\r",
							"    method: 'POST',\r",
							"    header: [\r",
							"        'Content-Type:application/x-www-form-urlencoded',\r",
							"        'Accept:application/json'\r",
							"    ],\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            {key: \"client_id\", value: \"admin-cli\", disabled: false},\r",
							"            {key: \"grant_type\", value: \"password\", disabled: false},\r",
							"            {key: \"username\", value: pm.variables.get(\"keycloakAdminName\"), disabled: false},\r",
							"            {key: \"password\", value: pm.variables.get(\"keycloakAdminPassword\"), disabled: false}\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(getAdminTokenRequest, function (err, response) {\r",
							"        pm.environment.set(\"adminAccessToken\", response.json().access_token);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.environment.set(\"email2\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
							"pm.variables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
							"pm.variables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"enabled\": true,\r\n    \"email\": \"{{email2}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"attributes\": {}\r\n}"
				},
				"url": {
					"raw": "{{keycloakUrl}}/admin/realms/{{realm}}/users",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set password for user2 in IdP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "352d2455-a20c-4fa6-851b-77d9c66d488b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ae22c818-20cd-4747-b3e4-b0e4b865c66b",
						"exec": [
							"if (pm.variables.get('forceAdminLogin')) {\r",
							"    const getAdminTokenRequest = {\r",
							"    url: pm.variables.replaceIn(\"{{keycloakUrl}}\") + \"/realms/master/protocol/openid-connect/token\",\r",
							"    method: 'POST',\r",
							"    header: [\r",
							"        'Content-Type:application/x-www-form-urlencoded',\r",
							"        'Accept:application/json'\r",
							"    ],\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            {key: \"client_id\", value: \"admin-cli\", disabled: false},\r",
							"            {key: \"grant_type\", value: \"password\", disabled: false},\r",
							"            {key: \"username\", value: pm.variables.get(\"keycloakAdminName\"), disabled: false},\r",
							"            {key: \"password\", value: pm.variables.get(\"keycloakAdminPassword\"), disabled: false}\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(getAdminTokenRequest, function (err, response) {\r",
							"        pm.variables.set(\"adminAccessToken\", response.json().access_token);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.environment.set(\"password2\", pm.variables.replaceIn('{{$randomPassword}}'))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"password\",\r\n    \"value\": \"{{password2}}\",\r\n    \"temporary\": false\r\n}\r\n"
				},
				"url": {
					"raw": "{{keycloakUrl}}/admin/realms/{{realm}}/users/{{userid2}}/reset-password",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"users",
						"{{userid2}}",
						"reset-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 login step1: user opens a page and is redirected to IdP login page",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "40a31c06-3dae-48ee-8ac8-78bf48116dfc",
						"exec": [
							"const re = /document.cookie=(.*);document.cookie=(.*);document.cookie=\"signature=(.*);path=\\/\";location=\"([^\"]+)\"/\r",
							"\r",
							"const result = re.exec(responseBody)\r",
							"const signature = result[3]\r",
							"const location = result[4]\r",
							"\r",
							"const expectedRedirectUri = pm.variables.replaceIn(\"{{baseUrl}}/login/callback\")\r",
							"const locationBase = pm.variables.replaceIn(\"{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/auth?response_type=code&client_id={{client}}&redirect_uri=\")\r",
							"\r",
							"const appUrl = pm.variables.replaceIn(\"{{appUrl}}\")\r",
							"const domain = /(http|https):\\/\\/([^\\/]+)/.exec(appUrl)[2]\r",
							"\r",
							"const jar = pm.cookies.jar();\r",
							"jar.set(domain, { name: \"fragmentAfterLogin\", value: \"\"} )\r",
							"jar.set(domain, \"locationAfterLogin\", pm.variables.replaceIn(\"{{pathPrefix}}/app/person\"))\r",
							"jar.set(domain, \"signature\", signature)\r",
							"\r",
							"pm.environment.set(\"idpLoginPage\", locationBase + expectedRedirectUri)\r",
							"\r",
							"tests[\"Authorization code flow initiated: user is redirected to IdP: \" + location ] = location === locationBase + encodeURIComponent(expectedRedirectUri);\r",
							"tests[\"Captured signature: \" + signature ] = signature != null;\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "148ae72b-7bc7-452b-9676-d4e6754f8305",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 login step2: open IdP login page",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9744892-7123-46ad-a39b-b49349293f8d",
						"exec": [
							"const re = /action=\"([^\"]+)\"/\r",
							"const capturedPostUrl = re.exec(responseBody)[1]\r",
							"\r",
							"// Hell, why there is no replaceAll???\r",
							"const loginPostUrl = capturedPostUrl.split(\"&amp;\").join(\"&\")\r",
							"\r",
							"pm.environment.set(\"loginPostUrl\", loginPostUrl)\r",
							"\r",
							"tests[`[INFO] loginPostUrl =: ${loginPostUrl}`] = loginPostUrl != null\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "84789c8b-7774-45a5-9ca0-b742f75c907b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{idpLoginPage}}",
					"host": [
						"{{idpLoginPage}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 login step3: post login form",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc24a71b-8383-427c-a58d-9ffe12d4ce04",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{email2}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password2}}",
							"type": "text"
						},
						{
							"key": "credentialId",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{loginPostUrl}}",
					"host": [
						"{{loginPostUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 registers in the application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc61c4d4-3f6f-4821-b866-e4a7686478f3",
						"exec": [
							"var responseJSON = JSON.parse(responseBody)\r",
							"pm.environment.set(\"user2AppId\", responseJSON[\"id\"])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person/register",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "User2 reads User1's proifile in the app",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4876dfde-f177-4bbd-b747-53967bf12861",
						"exec": [
							"var responseJSON = JSON.parse(responseBody)\r",
							"tests[`[Check user1 profile in the app has changed` ] = responseJSON.firstName === \"John\" && responseJSON.lastName === \"Doe\"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{appUrl}}/person/{{user1AppId}}",
					"host": [
						"{{appUrl}}"
					],
					"path": [
						"person",
						"{{user1AppId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ec0c08be-edeb-41b8-8bac-dbfdb3b65c39",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0f6c6ccd-71c4-40c4-b8e1-7acede021763",
				"type": "text/javascript",
				"exec": [
					"tests[\"[INFO] Request: \" + (('data' in request && typeof request.data === 'object') ? JSON.stringify(request['data']) : '') ] = true;",
					"tests[\"[INFO] Response: \" + pm.response.code + \" \" + pm.response.status + \", body: \" + responseBody] = true;",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "10695366-bf0b-4929-81fa-d670329ee366",
			"key": "baseUrl",
			"value": "http://arch.homework"
		},
		{
			"id": "2ff4c072-923b-481c-a64e-afe107fccf04",
			"key": "pathPrefix",
			"value": ""
		},
		{
			"id": "c96e406b-f57b-4645-9e4a-b24b9bede545",
			"key": "keycloakUrl",
			"value": "{{baseUrl}}{{pathPrefix}}/auth"
		},
		{
			"id": "fcf4afa2-dd40-4d26-93ed-1a09f985f542",
			"key": "keycloakAdminName",
			"value": "admin"
		},
		{
			"id": "2d5117ca-172d-402a-8019-362bcb2b76a7",
			"key": "keycloakAdminPassword",
			"value": "admin"
		},
		{
			"id": "481e8c9b-ac1d-4fb4-b90d-df1913bf6725",
			"key": "forceAdminLogin",
			"value": "true"
		},
		{
			"id": "80832977-f0d2-411f-8e9f-dde3e4c0acbb",
			"key": "realm",
			"value": "myrealm"
		},
		{
			"id": "69576e27-6259-4e9b-87eb-22c1a04ab697",
			"key": "client",
			"value": "myclient"
		},
		{
			"id": "dc62b543-75f4-4d6a-b9bb-1ec9732d7ba3",
			"key": "appUrl",
			"value": "{{baseUrl}}{{pathPrefix}}/app"
		}
	],
	"protocolProfileBehavior": {}
}